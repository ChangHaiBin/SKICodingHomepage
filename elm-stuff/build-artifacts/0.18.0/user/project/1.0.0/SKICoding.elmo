var _user$project$SKICoding$style10_s = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: A2(_user$project$Style_ops['=>'], 'backgroundColor', '#FFFFFF'),
		_1: {
			ctor: '::',
			_0: A2(_user$project$Style_ops['=>'], 'color', '#000000'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Style_ops['=>'], 'font-family', 'Arial'),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$SKICoding$Model = F6(
	function (a, b, c, d, e, f) {
		return {answer: a, response: b, userGuesses: c, numTries: d, gameState: e, win: f};
	});
var _user$project$SKICoding$KeyChar = function (a) {
	return {ctor: 'KeyChar', _0: a};
};
var _user$project$SKICoding$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$keyboard$Keyboard$downs(
				function (keyCode) {
					return _user$project$SKICoding$KeyChar(
						_elm_lang$core$Char$toLower(
							_elm_lang$core$Char$fromCode(keyCode)));
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SKICoding$NewWord = function (a) {
	return {ctor: 'NewWord', _0: a};
};
var _user$project$SKICoding$init = {
	ctor: '_Tuple2',
	_0: {
		answer: 'PlaceHolder',
		response: 'Guess any letter from A to Z.',
		userGuesses: {ctor: '[]'},
		numTries: 6,
		gameState: 'PlaceHolder',
		win: false
	},
	_1: A2(
		_elm_lang$core$Random$generate,
		_user$project$SKICoding$NewWord,
		A2(
			_elm_lang$core$Random$int,
			0,
			_elm_lang$core$List$length(_user$project$WordList$wordList) - 1))
};
var _user$project$SKICoding$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Roll':
				var wordLength = _elm_lang$core$List$length(_user$project$WordList$wordList);
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$SKICoding$NewWord,
						A2(_elm_lang$core$Random$int, 0, wordLength - 1))
				};
			case 'KeyChar':
				var _p2 = _p0._0;
				if (_elm_lang$core$Native_Utils.eq(model.numTries, 0) || (model.win || (!((_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Native_Utils.chr('a'),
					_p2) < 1) && (_elm_lang$core$Native_Utils.cmp(
					_p2,
					_elm_lang$core$Native_Utils.chr('z')) < 1))))) {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (A2(_user$project$Helper$listContains, _p2, model.userGuesses)) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									response: A2(
										_elm_lang$core$Basics_ops['++'],
										'You have already guessed the letter ',
										_elm_lang$core$String$toUpper(
											_elm_lang$core$String$fromChar(_p2)))
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var _p1 = (!A2(
							_user$project$Helper$listContains,
							_p2,
							_elm_lang$core$String$toList(model.answer))) ? {
							ctor: '_Tuple2',
							_0: model.numTries - 1,
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'The answer does NOT contain the letter ',
								_elm_lang$core$String$toUpper(
									_elm_lang$core$String$fromChar(_p2)))
						} : {
							ctor: '_Tuple2',
							_0: model.numTries,
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'The answer contains the letter ',
								_elm_lang$core$String$toUpper(
									_elm_lang$core$String$fromChar(_p2)))
						};
						var newNumTries = _p1._0;
						var newResponse = _p1._1;
						var newUserGuesses = {ctor: '::', _0: _p2, _1: model.userGuesses};
						var newWin = A2(
							_user$project$Helper$allFoundIn,
							newUserGuesses,
							_elm_lang$core$String$toList(model.answer));
						var newGameState = _elm_lang$core$Native_Utils.eq(newNumTries, 0) ? A2(
							_elm_lang$core$Basics_ops['++'],
							'You lose! Answer: ',
							_elm_lang$core$String$toUpper(model.answer)) : (newWin ? A2(
							_elm_lang$core$Basics_ops['++'],
							'You win! Answer: ',
							_elm_lang$core$String$toUpper(model.answer)) : model.gameState);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{numTries: newNumTries, userGuesses: newUserGuesses, response: newResponse, gameState: newGameState, win: newWin}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			default:
				var selectedWord = A2(
					_elm_lang$core$Maybe$withDefault,
					'test',
					A2(_user$project$Helper$indexAt, _p0._0, _user$project$WordList$wordList));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							answer: selectedWord,
							response: 'New Game.',
							gameState: A2(
								_elm_lang$core$Basics_ops['++'],
								_user$project$Helper$numToString(
									_elm_lang$core$String$length(selectedWord)),
								'letter word has been chosen.'),
							userGuesses: {ctor: '[]'},
							numTries: 6,
							win: false
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$SKICoding$Roll = {ctor: 'Roll'};
var _user$project$SKICoding$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: A2(_user$project$Style_ops['=>'], 'user-select', 'none'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Style$pad2_s, 50, 0),
						_1: {
							ctor: '::',
							_0: _user$project$SKICoding$style10_s,
							_1: {
								ctor: '::',
								_0: _user$project$Style$center_s,
								_1: {
									ctor: '::',
									_0: _user$project$Style$width_s(100),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Style$arial_s,
							_1: {
								ctor: '::',
								_0: _user$project$Style$center_s,
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: A2(_user$project$Style_ops['=>'], 'clear', 'right'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{
									ctor: '::',
									_0: _user$project$Style$fontSize_percent_s(150),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Style$pad2_s, 16, 0),
										_1: {
											ctor: '::',
											_0: _user$project$Style$bold_s,
											_1: {
												ctor: '::',
												_0: _user$project$Style$maxWidth_s(700),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Word Guessing Game (HangMan)'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _user$project$Style$fontSize_percent_s(100),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Use your keyboard (Desktop) or the buttons below (Mobile)'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$p,
										{
											ctor: '::',
											_0: _user$project$Style$fontSize_percent_s(200),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_user$project$Helper$printUpperCharList(
													A3(
														_user$project$Helper$replaceIfNotFoundIn,
														_elm_lang$core$Native_Utils.chr('_'),
														model.userGuesses,
														_elm_lang$core$String$toList(model.answer)))),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$p,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{ctor: '[]'},
													A2(
														_elm_lang$core$List$map,
														function (x) {
															return A2(
																_elm_lang$html$Html$button,
																{
																	ctor: '::',
																	_0: _user$project$Style$fontSize_percent_s(150),
																	_1: {
																		ctor: '::',
																		_0: _user$project$Style$width_px_s(50),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Style$height_px_s(50),
																			_1: {
																				ctor: '::',
																				_0: A2(_user$project$Style$margin2_s, 5, 5),
																				_1: {
																					ctor: '::',
																					_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$html$Html_Events$onClick(
																							_user$project$SKICoding$KeyChar(x)),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		}
																	}
																},
																{
																	ctor: '::',
																	_0: _elm_lang$html$Html$text(
																		_elm_lang$core$String$toUpper(
																			_elm_lang$core$String$fromChar(x))),
																	_1: {ctor: '[]'}
																});
														},
														{
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.chr('a'),
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.chr('b'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.chr('c'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.chr('d'),
																		_1: {ctor: '[]'}
																	}
																}
															}
														})),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{ctor: '[]'},
														A2(
															_elm_lang$core$List$map,
															function (x) {
																return A2(
																	_elm_lang$html$Html$button,
																	{
																		ctor: '::',
																		_0: _user$project$Style$fontSize_percent_s(150),
																		_1: {
																			ctor: '::',
																			_0: _user$project$Style$width_px_s(50),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Style$height_px_s(50),
																				_1: {
																					ctor: '::',
																					_0: A2(_user$project$Style$margin2_s, 5, 5),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$html$Html_Events$onClick(
																								_user$project$SKICoding$KeyChar(x)),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text(
																			_elm_lang$core$String$toUpper(
																				_elm_lang$core$String$fromChar(x))),
																		_1: {ctor: '[]'}
																	});
															},
															{
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.chr('e'),
																_1: {
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.chr('f'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.chr('g'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$Native_Utils.chr('h'),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															})),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$div,
															{ctor: '[]'},
															A2(
																_elm_lang$core$List$map,
																function (x) {
																	return A2(
																		_elm_lang$html$Html$button,
																		{
																			ctor: '::',
																			_0: _user$project$Style$fontSize_percent_s(150),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Style$width_px_s(50),
																				_1: {
																					ctor: '::',
																					_0: _user$project$Style$height_px_s(50),
																					_1: {
																						ctor: '::',
																						_0: A2(_user$project$Style$margin2_s, 5, 5),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$html$Html_Events$onClick(
																									_user$project$SKICoding$KeyChar(x)),
																								_1: {ctor: '[]'}
																							}
																						}
																					}
																				}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text(
																				_elm_lang$core$String$toUpper(
																					_elm_lang$core$String$fromChar(x))),
																			_1: {ctor: '[]'}
																		});
																},
																{
																	ctor: '::',
																	_0: _elm_lang$core$Native_Utils.chr('i'),
																	_1: {
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.chr('j'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$Native_Utils.chr('k'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.chr('l'),
																				_1: {ctor: '[]'}
																			}
																		}
																	}
																})),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$div,
																{ctor: '[]'},
																A2(
																	_elm_lang$core$List$map,
																	function (x) {
																		return A2(
																			_elm_lang$html$Html$button,
																			{
																				ctor: '::',
																				_0: _user$project$Style$fontSize_percent_s(150),
																				_1: {
																					ctor: '::',
																					_0: _user$project$Style$width_px_s(50),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Style$height_px_s(50),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Style$margin2_s, 5, 5),
																							_1: {
																								ctor: '::',
																								_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$html$Html_Events$onClick(
																										_user$project$SKICoding$KeyChar(x)),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text(
																					_elm_lang$core$String$toUpper(
																						_elm_lang$core$String$fromChar(x))),
																				_1: {ctor: '[]'}
																			});
																	},
																	{
																		ctor: '::',
																		_0: _elm_lang$core$Native_Utils.chr('m'),
																		_1: {
																			ctor: '::',
																			_0: _elm_lang$core$Native_Utils.chr('n'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.chr('o'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$core$Native_Utils.chr('p'),
																					_1: {ctor: '[]'}
																				}
																			}
																		}
																	})),
															_1: {
																ctor: '::',
																_0: A2(
																	_elm_lang$html$Html$div,
																	{ctor: '[]'},
																	A2(
																		_elm_lang$core$List$map,
																		function (x) {
																			return A2(
																				_elm_lang$html$Html$button,
																				{
																					ctor: '::',
																					_0: _user$project$Style$fontSize_percent_s(150),
																					_1: {
																						ctor: '::',
																						_0: _user$project$Style$width_px_s(50),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Style$height_px_s(50),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Style$margin2_s, 5, 5),
																								_1: {
																									ctor: '::',
																									_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																									_1: {
																										ctor: '::',
																										_0: _elm_lang$html$Html_Events$onClick(
																											_user$project$SKICoding$KeyChar(x)),
																										_1: {ctor: '[]'}
																									}
																								}
																							}
																						}
																					}
																				},
																				{
																					ctor: '::',
																					_0: _elm_lang$html$Html$text(
																						_elm_lang$core$String$toUpper(
																							_elm_lang$core$String$fromChar(x))),
																					_1: {ctor: '[]'}
																				});
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$core$Native_Utils.chr('q'),
																			_1: {
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.chr('r'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$core$Native_Utils.chr('s'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$core$Native_Utils.chr('t'),
																						_1: {ctor: '[]'}
																					}
																				}
																			}
																		})),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$div,
																		{ctor: '[]'},
																		A2(
																			_elm_lang$core$List$map,
																			function (x) {
																				return A2(
																					_elm_lang$html$Html$button,
																					{
																						ctor: '::',
																						_0: _user$project$Style$fontSize_percent_s(150),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Style$width_px_s(50),
																							_1: {
																								ctor: '::',
																								_0: _user$project$Style$height_px_s(50),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Style$margin2_s, 5, 5),
																									_1: {
																										ctor: '::',
																										_0: _user$project$Style$backgroundColor_s('#EEEEEE'),
																										_1: {
																											ctor: '::',
																											_0: _elm_lang$html$Html_Events$onClick(
																												_user$project$SKICoding$KeyChar(x)),
																											_1: {ctor: '[]'}
																										}
																									}
																								}
																							}
																						}
																					},
																					{
																						ctor: '::',
																						_0: _elm_lang$html$Html$text(
																							_elm_lang$core$String$toUpper(
																								_elm_lang$core$String$fromChar(x))),
																						_1: {ctor: '[]'}
																					});
																			},
																			{
																				ctor: '::',
																				_0: _elm_lang$core$Native_Utils.chr('u'),
																				_1: {
																					ctor: '::',
																					_0: _elm_lang$core$Native_Utils.chr('v'),
																					_1: {
																						ctor: '::',
																						_0: _elm_lang$core$Native_Utils.chr('w'),
																						_1: {
																							ctor: '::',
																							_0: _elm_lang$core$Native_Utils.chr('x'),
																							_1: {
																								ctor: '::',
																								_0: _elm_lang$core$Native_Utils.chr('y'),
																								_1: {
																									ctor: '::',
																									_0: _elm_lang$core$Native_Utils.chr('z'),
																									_1: {ctor: '[]'}
																								}
																							}
																						}
																					}
																				}
																			})),
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{
													ctor: '::',
													_0: _user$project$Style$fontSize_percent_s(100),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(model.response),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$p,
													{
														ctor: '::',
														_0: _user$project$Style$fontSize_percent_s(100),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text(
															A2(
																_elm_lang$core$Basics_ops['++'],
																'Previous guess: ',
																_user$project$Helper$printUpperCharList(
																	_elm_lang$core$List$reverse(model.userGuesses)))),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _user$project$Style$fontSize_percent_s(100),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'You have ',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(model.numTries),
																		' chance(s) remaining.'))),
															_1: {ctor: '[]'}
														}),
													_1: {
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$p,
															{
																ctor: '::',
																_0: _user$project$Style$fontSize_percent_s(100),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(model.gameState),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_elm_lang$html$Html$p,
																{ctor: '[]'},
																{
																	ctor: '::',
																	_0: A2(
																		_elm_lang$html$Html$button,
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html_Events$onClick(_user$project$SKICoding$Roll),
																			_1: {
																				ctor: '::',
																				_0: _user$project$Style$fontSize_percent_s(100),
																				_1: {ctor: '[]'}
																			}
																		},
																		{
																			ctor: '::',
																			_0: _elm_lang$html$Html$text('NEW GAME'),
																			_1: {ctor: '[]'}
																		}),
																	_1: {ctor: '[]'}
																}),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$SKICoding$main = _elm_lang$html$Html$program(
	{init: _user$project$SKICoding$init, view: _user$project$SKICoding$view, update: _user$project$SKICoding$update, subscriptions: _user$project$SKICoding$subscriptions})();
